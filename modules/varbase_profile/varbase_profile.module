<?php

/**
 * @file
 * Enables modules and site configuration for a Varbase site installation.
 */

use Symfony\Component\Yaml\Yaml;
use Drupal\Core\Form\FormStateInterface;
use Drupal\language\Entity\ConfigurableLanguage;
use Drupal\varbase\Config\ConfigBit;
use Drupal\varbase\Form\ConfigureMultilingualForm;
use Drupal\varbase\Form\AssemblerForm;
use Drupal\varbase\Form\DevelopmentToolsAssemblerForm;
use Drupal\varbase_profile\Entity\VarbaseProfileEntityDefinitionUpdateManager;

use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\Yaml\Yaml;
use Drupal\Core\Config\InstallStorage;
use Drupal\Core\Config\StorageInterface;
use Drupal\Core\Config\FileStorage;

/**
 * Batch function to fix entity updates to clear up any mismatched entity.
 *
 * Entity and/or field definitions, The following changes were detected in
 * the entity type and field definitions.
 *
 * @param string|array $entity_update
 *   To entity update or not.
 */
function varbase_profile_fix_entity_update($entity_update) {
  if ($entity_update) {
    \Drupal::classResolver()
      ->getInstanceFromDefinition(VarbaseProfileEntityDefinitionUpdateManager::class)
      ->applyUpdates();
  }
}

/**
 * Implements hook_toolbar_alter().
 */
function varbase_profile_toolbar_alter(&$items) {
  if (\Drupal::currentUser()->hasPermission('access toolbar')
    && !empty($items['admin_toolbar_tools'])) {
    $items['admin_toolbar_tools']['#attached']['library'][] = 'varbase_profile/toolbar.icon';
  }
}

/**
 * Implements hook_modules_installed().
 */
function varbase_profile_modules_installed($modules) {
  // If the profile was installed ensure we to the post handling we can't do in
  // the profile itself in order to make it possible to install from existing
  // config.
  if (in_array('varbase', $modules)) {
    // Install optional configs.
    $config_installer = \Drupal::service('config.installer');
    $optional_install_path = drupal_get_path('profile', 'varbase') . '/' . InstallStorage::CONFIG_OPTIONAL_DIRECTORY;
    if (is_dir($optional_install_path)) {
      // Install any optional config the profile provides.
      $storage = new FileStorage($optional_install_path, StorageInterface::DEFAULT_COLLECTION);
      $config_installer->installOptionalConfig($storage, '');
      // Have the .settings.yml configs into the active config.
      $settings_config_files = file_scan_directory($optional_install_path, '/^.*(settings.yml)$/i');
      if (isset($settings_config_files) && is_array($settings_config_files)) {
        foreach ($settings_config_files as $settings_config_file) {
          $settings_config_file_content = file_get_contents(DRUPAL_ROOT . '/' . $settings_config_file->uri);
          $settings_config_file_data = (array) Yaml::parse($settings_config_file_content);
          $config_factory = \Drupal::configFactory()->getEditable($settings_config_file->name);
          $config_factory->setData($settings_config_file_data)->save(TRUE);
        }
      }
    }
    // ---------------------------------------------------------------------------
    // Set front page to "node".
    \Drupal::configFactory()->getEditable('system.site')->set('page.front', '/node')->save(TRUE);

    // Entity updates to clear up any mismatched entity and/or field definitions
    // And Fix changes were detected in the entity type and field definitions.
    \Drupal::classResolver()
      ->getInstanceFromDefinition(VarbaseProfileEntityDefinitionUpdateManager::class)
      ->applyUpdates();

    // If Varbase Tour were enabled then redirect to the homepage with activ tour.
    if (isset($GLOBALS['homepage_with_varbase_tour'])
      && $GLOBALS['homepage_with_varbase_tour'] == TRUE) {
      $homepage_with_tour = "/?tour";
      $response = new RedirectResponse($homepage_with_tour);
      $response->send();
      exit;

      include_once __DIR__ . '/../../../../core/includes/install.core.inc';
      include_once __DIR__ . '/../../../../core/includes/install.inc';
      install_goto('?tour');
    }
  }
}
